#BlueJ class context
comment0.target=MonticuloBinario
comment1.params=
comment1.target=MonticuloBinario()
comment1.text=crea\ un\ Heap\ vacio
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ obtiene\ un\ String\ con\ los\ datos\ de\ una\ CP\ ordenados\ Por\ Niveles\ \n\ \ y\ con\ el\ formato\ que\ se\ usa\ en\ el\ estandar\ de\ Java\ (entre\ corchetes\n\ \ cuadrados\ y\ separando\ cada\ elemento\ del\ anterior\ mediante\ una\ coma\ \n\ \ seguida\ de\ un\ espacio\ en\ blanco);\ si\ la\ CP\ esta\ vacia\ el\ String\ \n\ \ resultado\ es\ []\n
comment11.params=
comment11.target=int\ contarHojas()
comment11.text=devuelve\ el\ numero\ de\ hojas\ de\ un\ Heap\ en\ Theta(1)
comment12.params=
comment12.target=java.lang.Comparable\ recuperarMax()
comment12.text=devuelve\ el\ maximo\ de\ un\ Heap\ tras\ talla/2\ compareTo
comment13.params=e
comment13.target=void\ introducir(java.lang.Comparable)
comment14.params=
comment14.target=void\ arreglar()
comment15.params=i
comment15.target=void\ arreglar(int)
comment16.params=
comment16.target=void\ arreglarIterativo()
comment16.text=Restablece\ la\ propiedad\ de\ orden\ de\ un\ Heap
comment2.params=n
comment2.target=MonticuloBinario(int)
comment2.text=crea\ una\ Cola\ de\ Prioridad\ (CP)\ vacia\ con\ capacidad\ inicial\ n
comment3.params=
comment3.target=boolean\ esVacia()
comment3.text=comprueba\ si\ un\ Heap\ es\ vacio\ en\ Theta(1)
comment4.params=
comment4.target=java.lang.Comparable\ recuperarMin()
comment4.text=devuelve\ el\ minimo\ de\ un\ Heap\ en\ Theta(1)
comment5.params=e
comment5.target=void\ insertar(java.lang.Comparable)
comment5.text=inserta\ e\ en\ un\ Heap
comment6.params=e\ posIns
comment6.target=int\ reflotar(java.lang.Comparable,\ int)
comment7.params=
comment7.target=void\ duplicarArray()
comment8.params=
comment8.target=java.lang.Comparable\ eliminarMin()
comment8.text=recupera\ y\ elimina\ el\ minimo\ de\ un\ Heap
comment9.params=pos
comment9.target=void\ hundir(int)
numComments=17
